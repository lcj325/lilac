<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd"
	default-lazy-init="true">

	<description>spring config </description>

	<bean class="com.lilac.core.config.Application" lazy-init="false"></bean>

	<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
	<context:component-scan base-package="com.lilac.core">
	</context:component-scan>

	<bean id="hibernateJpaVendorAdapter"
		class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		<property name="databasePlatform">
			<bean factory-method="getDialect" class="com.lilac.core.util.jdbc.DialectUtils">
				<constructor-arg ref="dataSource" />
			</bean>
		</property>
	</bean>

	<!-- spring对ehcache的缓存工厂支持 -->
	<bean id="ehCacheManagerFactory"
		class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:ehcache/ehcache.xml" />
	</bean>

	<!-- spring对ehcache的缓存管理 -->
	<bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
		<property name="cacheManager" ref="ehCacheManagerFactory"></property>
	</bean>

	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod"
			value="com.lilac.core.cache.CacheHelper.setEhCacheManager"></property>
		<property name="arguments">
			<list>
				<ref bean="ehCacheManager" />
			</list>
		</property>
	</bean>

	<!-- I18N config -->
	<bean id="messageSource" class="com.lilac.core.i18n.I18NMessageSource">
		<property name="useCodeAsDefaultMessage" value="true" />
		<property name="messageService" ref="i18NMessageService"></property>
	</bean>

	<bean id="messageSourceAccessor"
		class="org.springframework.context.support.MessageSourceAccessor">
		<constructor-arg ref="messageSource" />
	</bean>

	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod"
			value="com.lilac.core.i18n.MessageHelper.setMessageSourceAccessor"></property>
		<property name="arguments">
			<list>
				<ref bean="messageSourceAccessor" />
			</list>
		</property>
	</bean>

	<!-- 使用缓存annotation 配置 -->
	<cache:annotation-driven cache-manager="ehCacheManager" />

	<!-- Jpa Entity Manager 配置 -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter" />
		<property name="packagesToScan" value="com.lilac" />
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.listeners.envers.autoRegister">false</prop>
				<prop key="org.hibernate.envers.audit_table_suffix">_H</prop>
			</props>
		</property>
	</bean>

	<!-- Spring Data Jpa配置 -->
	<jpa:repositories base-package="com.lilac"
		transaction-manager-ref="transactionManager"
		entity-manager-factory-ref="entityManagerFactory"
		repository-impl-postfix="Impl"
		factory-class="com.lilac.core.repository.support.BaseRepositoryFactoryBean">
	</jpa:repositories>

	<!-- Jpa 事务配置 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />

	<!-- JSR303 Validator定义 -->
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />

	<!-- production环境 -->
	<beans profile="production">
		<context:property-placeholder
			ignore-unresolvable="true" location="classpath*:spring/application.properties" />
		<!-- 数据源配置, 使用Druid数据库连接池 -->
		<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
			init-method="init" destroy-method="close">
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
			<!-- 配置初始化大小、最小、最大 -->
			<property name="initialSize" value="${druid.initialSize}" />
			<property name="minIdle" value="${druid.minIdle}" />
			<property name="maxActive" value="${druid.maxActive}" />
			<!-- 配置获取连接等待超时的时间 -->
			<property name="maxWait" value="60000" />
			<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
			<property name="timeBetweenEvictionRunsMillis" value="60000" />
			<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
			<property name="minEvictableIdleTimeMillis" value="300000" />
			<property name="validationQuery" value="${druid.oracle.validationQuery}" />
			<property name="testOnBorrow" value="false" />
			<property name="testOnReturn" value="false" />
			<property name="testWhileIdle" value="true" />
			<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
			<property name="poolPreparedStatements" value="true" />
			<property name="maxPoolPreparedStatementPerConnectionSize"
				value="20" />
			<!-- 配置监控统计拦截的filters -->
			<property name="filters" value="stat" />
		</bean>
	</beans>
	<!-- local development环境 -->
	<beans profile="development">
		<context:property-placeholder
			ignore-unresolvable="true"
			location="classpath*:spring/application.properties,spring/application.development.properties" />
		<!-- 数据源配置, 使用Druid数据库连接池 -->
		<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
			init-method="init" destroy-method="close">
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
			<!-- 配置初始化大小、最小、最大 -->
			<property name="initialSize" value="${druid.initialSize}" />
			<property name="minIdle" value="${druid.minIdle}" />
			<property name="maxActive" value="${druid.maxActive}" />
			<!-- 配置获取连接等待超时的时间 -->
			<property name="maxWait" value="60000" />
			<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
			<property name="timeBetweenEvictionRunsMillis" value="60000" />
			<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
			<property name="minEvictableIdleTimeMillis" value="300000" />
			<property name="validationQuery" value="${druid.oracle.validationQuery}" />
			<property name="testOnBorrow" value="false" />
			<property name="testOnReturn" value="false" />
			<property name="testWhileIdle" value="true" />
			<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
			<property name="poolPreparedStatements" value="true" />
			<property name="maxPoolPreparedStatementPerConnectionSize"
				value="20" />
			<!-- 配置监控统计拦截的filters -->
			<property name="filters" value="stat,slf4j" />
		</bean>

		<!-- 初始化数据表结构 与默认数据 -->
		<jdbc:initialize-database data-source="dataSource"
			ignore-failures="ALL">
			<jdbc:script location="classpath:data/oracle/import-data.sql" />
		</jdbc:initialize-database>

	</beans>

	<!-- unit test环境 -->
	<beans profile="test">
		<context:property-placeholder
			ignore-resource-not-found="true"
			location="classpath*:spring/application.properties,
          			  classpath*:spring/application.test.properties" />
		<!-- 数据源配置, 使用Druid数据库连接池 -->
		<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
			init-method="init" destroy-method="close">
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
			<!-- 配置初始化大小、最小、最大 -->
			<property name="initialSize" value="${druid.initialSize}" />
			<property name="minIdle" value="${druid.minIdle}" />
			<property name="maxActive" value="${druid.maxActive}" />
			<!-- 配置获取连接等待超时的时间 -->
			<property name="maxWait" value="60000" />
			<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
			<property name="timeBetweenEvictionRunsMillis" value="60000" />
			<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
			<property name="minEvictableIdleTimeMillis" value="300000" />
			<property name="validationQuery" value="${druid.oracle.validationQuery}" />
			<property name="testOnBorrow" value="false" />
			<property name="testOnReturn" value="false" />
			<property name="testWhileIdle" value="true" />
			<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
			<property name="poolPreparedStatements" value="true" />
			<property name="maxPoolPreparedStatementPerConnectionSize"
				value="20" />
			<!-- 配置监控统计拦截的filters -->
			<property name="filters" value="stat,slf4j" />
		</bean>

		<!-- 初始化数据表结构 与默认数据 -->
		<jdbc:initialize-database data-source="dataSource"
			ignore-failures="ALL">
			<jdbc:script location="classpath:data/h2/import-data.sql" />
		</jdbc:initialize-database>
	</beans>

</beans>